#
# Desktop Release Platform
#

#CC			?= gcc
#CXX			?= g++
CXX			:= zig c++ -target $(TARGET_PLATFORM)
CC			:= zig cc -target $(TARGET_PLATFORM)
#CC			:= gcc
PRECOMPILED_STL := src/stl-$(TARGET_ARCH)-$(TARGET_OS)-$(TARGET_LIBC).pch

LFLAGS		?= -shared
CFLAGS		?= -std=c++17 -fPIC -I src -I vendor/spdlog/include -I vendor/raylib/src -D$(TARGET_PLATFORM)

ifeq ($(TARGET_OS),windows)
    CFLAGS += -DMYR_PLATFORM_WINDOWS -DMYR_BUILD_DLL
    LIBRARY_NAME = myriad.dll
    LFLAGS += -Wl,--out-implib,$(BIN_DIR)/myriad.lib -static-libgcc -lopengl32 -lgdi32 -lwinmm
endif
ifeq ($(TARGET_OS),linux)
    CFLAGS += -DMYR_PLATFORM_LINUX
#	 -DUSE_STL_PCH -H
    LIBRARY_NAME = libmyriad.so
endif

CFLAGS +=  -Wl,-soname,$(LIBRARY_NAME) -DMYRIAD_INTERNAL
LFLAGS +=  -l raylib -L$(BIN_DIR)

# Optimise for size with Clang flags: -g0 -Os -s 
ifeq ($(BUILD_MODE),Release)
	CFLAGS += -Os -s -g0
	LFLAGS += -Os -s -g0
endif
ifeq ($(BUILD_MODE),Debug)
	CFLAGS += -O0 -g
	LFLAGS += -O0 -g
endif


.PHONY: all clean rebuild dep setup cleanlibs

clean:
	@echo "Cleaning $(BIN_DIR)"
	@echo "Cleaning $(OBJ_DIR)"
	$(RM) $(OBJ_DIR)/*
	$(RM) $(BIN_DIR)/*
	@echo "Finished cleaning."

setup:
	@$(MKDIR) $(OBJ_DIR)
	@$(MKDIR) $(BIN_DIR)

cleanlibs:
	$(MAKE) -C vendor -f Makefile.RAYLIB CC="$(CC)" TARGET_OS=$(TARGET_OS) BIN_DIR="$(realpath $(BIN_DIR))" clean
	rm $(OBJ_DIR)/Remotery.o
dep:
	@echo Making Raylib with TARGET_OS=$(TARGET_OS) BIN_DIR=$(BIN_DIR)
	$(MAKE) -C vendor -f Makefile.RAYLIB CC="$(CC)" TARGET_OS=$(TARGET_OS) BIN_DIR="$(realpath $(BIN_DIR))" all
	

REMOTERY_FLAGS = -Ivendor/Remotery/lib

ifeq ($(TARGET_OS),linux)
    REMOTERY_FLAGS += -pthread -lm
endif
ifeq ($(TARGET_OS),windows)
# when linking for windows, add in  libws2_32.a libwinmm.a
    REMOTERY_FLAGS  += -lwinmm -lws2_32
#    LFLAGS 		    += -Wl,--allow-multiple-definition -pthread -lopengl32 -lgdi32 -lwinmm -mwindows -static -static-libgcc -static-libstdc++
endif

ifeq ($(USE_REMOTERY),true)
	@echo --- ---
	@echo "Making Remotery (-c means keep it as an object)"
	$(CXX) vendor/Remotery/lib/Remotery.c -c -o $(OBJ_DIR)/Remotery.o $(REMOTERY_FLAGS)
endif

#precompiled headers target, only rebuild if necessary
#these args must mirror the c++ build line.
#NOTE this version will only work with zig/CLANG
$(PRECOMPILED_STL):
	$(CXX) -c -o $(PRECOMPILED_STL) src/stl.hh -MMD -MP $(CFLAGS)

all: setup dep $(PRECOMPILED_STL) $(LIBRARY_NAME)

$(LIBRARY_NAME): $(OBJECTS)
	@echo "Linking $(LIBRARY_NAME) for $(TARGET_PLATFORM) on $(BUILD_OS)"
	@$(MKDIR) $(BIN_DIR)
ifeq ($(USE_REMOTERY),true)
	$(CXX) -o $(BIN_DIR)/$(LIBRARY_NAME) $(OBJECTS) $(OBJ_DIR)/Remotery.o $(LFLAGS)
else
	$(CXX) -o $(BIN_DIR)/$(LIBRARY_NAME) $(OBJECTS) $(CFLAGS) $(LFLAGS)
endif

# Compile objects to the build directory
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@echo "Building $@"
	$(MKDIR) $(dir $@)
	$(CXX) -MMD -MP -c -use-pch $(PRECOMPILED_STL) $(CFLAGS) $< -o $@

rebuild: clean cleanlibs all