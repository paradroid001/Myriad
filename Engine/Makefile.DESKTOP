#
# Desktop Release Platform
#
.PHONY: all clean rebuild dep


BIN_DIR		:= $(OUTPUT_DIR)/bin
OBJ_DIR		:= $(OUTPUT_DIR)/obj
LIB_DIR		:= $(OUTPUT_DIR)/lib

#CC			?= gcc
#CXX			?= g++
CXX			= zig c++ -target $(TARGET_PLATFORM)
CC			= zig cc -target $(TARGET_PLATFORM)

LFLAGS		?= -shared -l raylib -L$(BIN_DIR)
CFLAGS		?= -std=c++17 -fPIC -I src/include -I vendor/spdlog/include -I vendor/raylib/src -D$(TARGET_PLATFORM)


rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))
SOURCES		:=$(call rwildcard,$(SRC_DIR),*.cpp)
OBJECTS		:=$(patsubst $(SRC_DIR)/%, $(OBJ_DIR)/%, $(patsubst %.cpp, %.o, $(SOURCES)))

ifeq ($(TARGET_OS),windows)
    CFLAGS += -DMYR_PLATFORM_WINDOWS -DMYR_BUILD_DLL
    LIBRARY_NAME = myriad.dll
	LFLAGS += -Wl,--out-implib,$(BIN_DIR)/myriad.lib 
endif
ifeq ($(TARGET_OS),linux)
    CFLAGS += -DMYR_PLATFORM_LINUX
    LIBRARY_NAME = libmyriad.so
endif

CFLAGS +=  -Wl,-soname,$(LIBRARY_NAME)

ifeq ($(BUILD_OS),windows)
    COPY = copy
    MKDIR = mkdir -p
    RM = rm -rf
endif
ifeq ($(BUILD_OS),linux)
    COPY = cp
    MKDIR = mkdir -p
    RM = rm -rf
endif

clean:
	@echo "Cleaning $(BIN_DIR)"
	@echo "Cleaning $(OBJ_DIR)"
	$(RM) $(OBJ_DIR)/*
	$(RM) $(BIN_DIR)/*
	@echo "Finished cleaning."

dep:
	@echo Making Raylib with TARGET_OS=$(TARGET_OS) BIN_DIR=$(BIN_DIR)
	$(MAKE) -C vendor -f Makefile.RAYLIB CC="$(CC)" TARGET_OS=$(TARGET_OS) BIN_DIR="../$(BIN_DIR)" all

all: dep $(LIBRARY_NAME)

$(LIBRARY_NAME): $(OBJECTS)
	@echo "Linking $(LIBRARY_NAME) for $(TARGET_PLATFORM) on $(BUILD_OS)"
	@$(MKDIR) $(BIN_DIR)
	$(CXX) -o $(BIN_DIR)/$(LIBRARY_NAME) $(OBJECTS) $(LFLAGS)

# Compile objects to the build directory
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@echo "Building $@"
	$(MKDIR) $(dir $@)
	$(CXX) -MMD -MP -c $(CFLAGS) $< -o $@

rebuild: clean all