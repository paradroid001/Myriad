#
# Desktop Platform
#
.PHONY: all clean rebuild

CC			?= gcc
CXX			?= g++
LFLAGS		?= -shared
CFLAGS		?= -std=c++17 -fPIC -I src/include

BIN_DIR		:= $(OUTPUT_DIR)/bin
OBJ_DIR		:= $(OUTPUT_DIR)/obj
LIB_DIR		:= $(OUTPUT_DIR)/lib

rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))
SOURCES		:=$(call rwildcard,$(SRC_DIR),*.cpp)
OBJECTS		:=$(patsubst $(SRC_DIR)/%, $(OBJ_DIR)/%, $(patsubst %.cpp, %.o, $(SOURCES)))

clean:
	@echo "Cleaning $(BIN_DIR)"
	@echo "Cleaning $(OBJ_DIR)"
ifeq ($(HOST_PLATFORM),LINUX)
	rm $(OBJ_DIR)/*
	rm $(BIN_DIR)/*
endif
	@echo "Finished cleaning."

all: $(LIBRARY_NAME)

$(LIBRARY_NAME): $(OBJECTS)
	@echo "Linking on $(HOST_PLATFORM)"
ifeq ($(HOST_PLATFORM),LINUX)
	@mkdir -p $(BIN_DIR)
endif
	$(CXX) -o $(BIN_DIR)/$(LIBRARY_NAME) $(OBJECTS) $(LFLAGS) -D$(TARGET_PLATFORM)

# Compile objects to the build directory
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
ifeq ($(HOST_PLATFORM),LINUX)
    #@mkdir -p $(OBJ_DIR)
    #make each subdir
	@mkdir -p $(patsubst %.o, %, $@)
endif
    #$(MKDIR) $(call platformpth, $(@D))
    #@mkdir -p $(OBJ_DIR)
	$(CXX) -MMD -MP -c $(CFLAGS) $< -o $@

rebuild: clean all