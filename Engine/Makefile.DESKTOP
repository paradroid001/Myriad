#
# Desktop Platform
#
.PHONY: all clean rebuild

CC			?= gcc
CXX			?= g++
LFLAGS		?= -shared
CFLAGS		?= -std=c++17 -fPIC -I src/include -D$(TARGET_PLATFORM)

BIN_DIR		:= $(OUTPUT_DIR)/bin
OBJ_DIR		:= $(OUTPUT_DIR)/obj
LIB_DIR		:= $(OUTPUT_DIR)/lib

rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))
SOURCES		:=$(call rwildcard,$(SRC_DIR),*.cpp)
OBJECTS		:=$(patsubst $(SRC_DIR)/%, $(OBJ_DIR)/%, $(patsubst %.cpp, %.o, $(SOURCES)))

ifeq ($(HOST_PLATFORM),WINDOWS)
	CFLAGS += -DMYR_PLATFORM_WINDOWS -DMYR_BUILD_DLL
	LIBRARY_NAME := myriad.dll
	COPY := copy
	MKDIR := mkdir -p
	RM := rm
endif
ifeq ($(HOST_PLATFORM),LINUX)
	LIBRARY_NAME := libmyriad.so
	COPY := cp
	MKDIR := mkdir -p
	RM := rm -rf
endif

clean:
	@echo "Cleaning $(BIN_DIR)"
	@echo "Cleaning $(OBJ_DIR)"
	$(RM) $(OBJ_DIR)/*
	$(RM) $(BIN_DIR)/*
	@echo "Finished cleaning."

all: $(LIBRARY_NAME)

$(LIBRARY_NAME): $(OBJECTS)
	@echo "Linking on $(HOST_PLATFORM)"
	@$(MKDIR) $(BIN_DIR)
	$(CXX) -o $(BIN_DIR)/$(LIBRARY_NAME) $(OBJECTS) $(LFLAGS)

# Compile objects to the build directory
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@$(MKDIR) -p $(patsubst %.o, %, $@)
	$(CXX) -MMD -MP -c $(CFLAGS) $< -o $@

rebuild: clean all