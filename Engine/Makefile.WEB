#
# Web Platform
#

# HTML5 emscripten compiler
# WARNING: To compile to HTML5, code must be redesigned
# to use emscripten.h and emscripten_set_main_loop()
CC 						= emcc
CXX 					= emcc
LFLAGS					?= -l raylib
CFLAGS 					:= -std=c++17 -fPIC -I src/include -I vendor/spdlog/include -I vendor/raylib/src -D$(TARGET_PLATFORM)

# PLATFORM_WEB: Default properties
BUILD_WEB_ASYNCIFY    ?= FALSE
BUILD_WEB_SHELL       ?= minshell.html
BUILD_WEB_HEAP_SIZE   ?= 134217728
BUILD_WEB_RESOURCES   ?= TRUE
BUILD_WEB_RESOURCES_PATH  ?= src/resources

# -Os                        # size optimization
# -O2                        # optimization level 2, if used, also set --memory-init-file 0
# -s USE_GLFW=3              # Use glfw3 library (context/input management)
# -s ALLOW_MEMORY_GROWTH=1   # to allow memory resizing -> WARNING: Audio buffers could FAIL!
# -s TOTAL_MEMORY=16777216   # to specify heap memory size (default = 16MB) (67108864 = 64MB)
# -s USE_PTHREADS=1          # multithreading support
# -s WASM=0                  # disable Web Assembly, emitted by default
# -s ASYNCIFY                # lets synchronous C/C++ code interact with asynchronous JS
# -s FORCE_FILESYSTEM=1      # force filesystem to load/save files data
# -s ASSERTIONS=1            # enable runtime checks for common memory allocation errors (-O1 and above turn it off)
# --profiling                # include information for code profiling
# --memory-init-file 0       # to avoid an external memory initialization code file (.mem)
# --preload-file resources   # specify a resources folder for data compilation
# --source-map-base          # allow debugging in browser with source map
LDFLAGS += -s ASYNCIFY -s USE_GLFW=3 -s TOTAL_MEMORY=$(BUILD_WEB_HEAP_SIZE) -s FORCE_FILESYSTEM=1

# Build using asyncify
ifeq ($(BUILD_WEB_ASYNCIFY),TRUE)
	LDFLAGS += -s ASYNCIFY
endif

# Add resources building if required
ifeq ($(BUILD_WEB_RESOURCES),TRUE)
	LDFLAGS += --preload-file $(BUILD_WEB_RESOURCES_PATH)
endif

# Add debug mode flags if required
ifeq ($(BUILD_MODE),DEBUG)
	LDFLAGS += -s ASSERTIONS=1 --profiling
endif

# Define a custom shell .html and output extension
LDFLAGS += --shell-file $(BUILD_WEB_SHELL)
EXT = .html


.PHONY: all clean setup cleanlibs dep

setup:
	@$(MKDIR) $(OBJ_DIR)
	@$(MKDIR) $(BIN_DIR)

clean:
	@echo "Cleaning $(BIN_DIR)"
	@echo "Cleaning $(OBJ_DIR)"
	$(RM) $(OBJ_DIR)/*
	$(RM) $(BIN_DIR)/*
	@echo "Finished cleaning."

cleanlibs:
	$(MAKE) -C vendor -f Makefile.RAYLIB CC="$(CC)" TARGET_OS=$(TARGET_OS) BIN_DIR="$(realpath $(BIN_DIR))" clean
	rm $(OBJ_DIR)/Remotery.o

dep:
	@echo Making Raylib with TARGET_OS=$(TARGET_OS) BIN_DIR=$(BIN_DIR)
	$(MAKE) -C vendor -f Makefile.RAYLIB CC="$(CC)" CUSTOM_CFLAGS=-std=gnu99 BIN_DIR="$(realpath $(BIN_DIR))" all


all: setup dep $(LIBRARY_NAME)
$(LIBRARY_NAME): $(OBJECTS)
	@echo "Linking $(LIBRARY_NAME) for $(TARGET_PLATFORM) on $(BUILD_OS)"
	@$(MKDIR) $(BIN_DIR)
ifeq ($(USE_REMOTERY),true)
	$(CXX) -o $(BIN_DIR)/$(LIBRARY_NAME) $(OBJECTS) $(OBJ_DIR)/Remotery.o $(LFLAGS)
else
	$(CXX) -o $(BIN_DIR)/$(LIBRARY_NAME) $(OBJECTS) $(LFLAGS)
endif

# Compile objects to the build directory
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@echo "Building $@"
	$(MKDIR) $(dir $@)
	$(CXX) -MMD -MP -c $(CFLAGS) $< -o $@
